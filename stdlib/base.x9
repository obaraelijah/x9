;; Test if a sequence is not equal to each other
(defn not=
  "Test if a sequence is not equal to each other.
Example:
(not= 1 1 2) ; false
"
  (& args)
  (not (apply = args)))

;; Test if a collection is empty
(defn empty?
  "Test if a collection is empty."
  (x)
  (= 0 (len x)))

;; Test if a collection is non-empty

(defn non-empty?
  "Test if a collection is non-empty."
  (x)
  (not (empty? x)))

(defn is-even?
  "Test if the given item is even."
  (x)
  (= 0 (% x 2)))

;; Random

(defn dot-product
  "Dot product two vectors.
Example:
(dot-product '(1 2 3) '(4 5 6)) ; 32
"
  (l r)
  (cond
   (or (empty? l) (empty? r)) 0
   true (+ (* (head l) (head r))
           (dot-product (tail l) (tail r)))))


(defn quicksort
  "Sort a list using quicksort.
Example:
(quicksort '(3 1 2)) ; (1 2 3)
"
  (l)
  (cond
   (empty? l) l
   true (bind
         (pivot (head l)
          rest  (tail l)
          le    (filter (fn (x) (<= x pivot)) rest)
          ge    (filter (fn (x) (> x pivot)) rest))
         (+ (quicksort le) (list pivot) (quicksort ge)))))
